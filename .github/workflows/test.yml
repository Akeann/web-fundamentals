name: Test

on:
  pull_request_target:
    branches:
      - 'main'

jobs:
  prepare:
    name: Check user
    runs-on: ubuntu-latest
    outputs:
      task-name: ${{ steps.task-name.outputs.name }}
      student-name: ${{ steps.student-name.outputs.name }}
    steps:
      - name: Check user to perform action
        run: |
          AUTHOR_PR=${{ github.event.pull_request.user.login }}
          echo AUTHOR_PR=$AUTHOR_PR

          IS_ALLOW=$(curl -s "https://api.airtable.com/v0/appXFam00FE5hN2lS/sbpau-2023?view=full&fields%5B%5D=github-nickname" \
          -H "Authorization: Bearer ${{ secrets.AIRTABLE_TOKEN }}" | \
          jq ".records[] | .fields.\"github-nickname\"" | grep "$AUTHOR_PR" || true)

          if [ "$IS_ALLOW" == "" ]; then
              echo "user $AUTHOR_PR has no permissions to perform this action!"
              exit 1
          fi

      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v6

      - name: Define task name
        id: task-name
        run: |
          BRANCH_NAME=${{ steps.branch-name.outputs.current_branch }}
          echo "name=${BRANCH_NAME##submit/}" >> $GITHUB_OUTPUT
      - name: Define student name
        id: student-name
        run: |
          AUTHOR_PR=${{ github.event.pull_request.user.login }}
          echo "name=$AUTHOR_PR" >> $GITHUB_OUTPUT

  test:
    name: 'Test'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: prepare
    steps:
      - name: Echo prepare vars
        shell: bash
        run: |
          echo student-name: ${{ needs.prepare.outputs.student-name }} task-name:${{ needs.prepare.outputs.task-name }}

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Checkout shadow
        uses: actions/checkout@v3
        with:
          repository: DimaAmega/web-fundamentals-shadow
          token: ${{ secrets.SECRET_TOKEN }}
          path: .shadow

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install pnpm
        uses: pnpm/action-setup@v2.0.1
        id: pnpm-install
        with:
          version: 8.1.1
          run_install: false

      - name: Install dependencies shadow
        shell: bash
        run: cd .shadow && pnpm install

      - name: Copy tests
        shell: bash
        run: cd .shadow && pnpm ci-copy-all-tests-up-level

      - name: Install dependencies
        shell: bash
        run: pnpm install

      - name: Collect playwright tasks
        shell: bash
        id: playwright_tested_tasks
        run: |
          PW_TASKS=$(cd tasks && find . -type f -name 'playwright.config.js' | sed -r 's|/[^/]+$||' | sed 's/\.\///g' |  tr '\n' ',')
          echo "pw_tasks=$PW_TASKS"
          echo "pw_tasks=$PW_TASKS" >> $GITHUB_OUTPUT

      - name: Install playwright
        shell: bash
        if: contains(steps.playwright_tested_tasks.outputs.pw_tasks, needs.prepare.outputs.task-name)
        run: pnpm dlx playwright@1.32.1 install --with-deps

      - name: Run test
        shell: bash
        run: pnpm ci-test-selected --task ${{ needs.prepare.outputs.task-name }}

      - uses: actions/upload-artifact@v3
        if: always() && contains(steps.playwright_tested_tasks.outputs.pw_tasks, needs.prepare.outputs.task-name)
        with:
          name: playwright-report
          path: tasks/${{ needs.prepare.outputs.task-name }}/playwright-report/
          retention-days: 1

  mark-as-solved:
    name: 'Mark as solved'
    runs-on: ubuntu-latest
    timeout-minutes: 60
    needs: [test, prepare]
    steps:
      - name: Checkout shadow
        uses: actions/checkout@v3
        with:
          repository: DimaAmega/web-fundamentals-shadow
          token: ${{ secrets.SECRET_TOKEN }}

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Install pnpm
        uses: pnpm/action-setup@v2.0.1
        id: pnpm-install
        with:
          version: 8.1.1
          run_install: false

      - name: Install dependencies
        shell: bash
        run: pnpm install

      - name: Mark task as solved
        shell: bash
        run: pnpm mark-task-solved --student ${{ needs.prepare.outputs.student-name }} --task ${{ needs.prepare.outputs.task-name }}
        env:
          AIRTABLE_BASE_ID: appXFam00FE5hN2lS
          STUDENTS_TABLE: sbpau-2023
          TASKS_TABLE: tasks-2023
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_TOKEN }}
